/***************************************************************************************************************************************************
 # Class Name  = "giic_ConsultationToSalesOrderBatchHelper"
 # Author      = Ayush
 # Description = This class is responsible for Creating Sales order for each Consultation line item .
                
 # Change Log :
 ============================================================================================================
 Date                     Changed By                      Change Description
 ============================================================================================================
 06/23/2017               Ayush                           Original Version
 10/11/2017               Josh                            Updated to reflect that Original Contract Price no longer includes tax
 12/11/2017               Abhik                           Updated to auto assign promotion based on new business rule (product+branch+effective dates)
 5/21/2018                Mamadou                         Updated customer order detail to include original contract price
 5/25/2018                Sharif                          Add IS SCN field to be copy from opportunity to customer order and sales order
**************************************************************************************************************************************************/ 
public class giic_ConsultationToSalesOrderBatchHelper{
    
    /**
    *   Declaration of Variables.
    *
    **/  
    private Set<Id> setNewSalesOrderIds = new Set<Id>();
    // Initialize variables for pilot and pilot products.
    private Map<Id, List<Pilot_Product__c>> pilotBranchMap = new Map<Id, List<Pilot_Product__c>>();
    // Initialize map for Opportunity and Opportunity Line Items.
    private Map<Id, List<OpportunityLineItem>> opportunityLineItemsMap = new Map<Id, List<OpportunityLineItem>>();
    private Map<Id,Opportunity> opportunityMap = new Map<Id,Opportunity>();
    // Variable to store Notes from Consultations and related Appointments.
    private String formatedNotes;
    //Get Install branch groups
    private Group installBranchGroup = [Select Id,Name from Group where Name ='HDI Install Branches' limit 1];
    // Fetch mapping master data for Field Stage and Disposition.
    private List<Mapping_Master_Setting__mdt> mappingMasterList = [Select Id,Source_Field1__c,Source_Field2__c,
                                                                     Target_Field1__c,Target_Field2__c,Type__c 
                                                                     from Mapping_Master_Setting__mdt 
                                                                     where Type__c='ConsultationToSalesOrderStatus'];
    // Initialize variables for Consultation Notes , related appointments and files.
    private Map<String,Id> consultationNotes = new Map<String,Id>();
    private Map<Id,CKSW_BASE__Service__c> mapConsultationAppointments = new Map<Id,CKSW_BASE__Service__c>();
    private Map<Id,List<Id>> consultationFiles = new Map<Id,List<Id>>();
    // Initialize map for Conultation to list of Sales Orders.
    private Map<Id,List<gii__SalesOrder__c>> consultationSalesOrders = new Map<Id, List<gii__SalesOrder__c>>();//Map<ConsultationId, List<SalesOrder>>
    //Variables to automate creation of Service Order lines and Sales Order Additional Charges specific to a Service Product
    private Set<Id> serviceProduct2Ids = new Set<Id>();
    // Variables to set consultation with list of related Payment Records
    private Map<Id, List<Payment__c>> mapConsultationPayments = new Map<Id,List<Payment__c>>();
    private Map<Id, Id> product2IdToProductReferenceIdMap = new Map<Id, Id>(); //Map of Product2Id to Product Reference Id  
    private Map<Id, List<gii__AdditionalCharge__c>> product2IdToAdditionalChargesMap = new Map<Id, List<gii__AdditionalCharge__c>>(); //Map of Product2Id, List of Additional Charges 
    //Map of Product Id to List of Pricebook Id and Promotion Id
    private Map<String, giic_Product_Pricebook_Mapping__c> product2IdToPriceBookPromotionMap = new Map<String, giic_Product_Pricebook_Mapping__c>(); 
    private Map<OpportunityLineItem,String> mapOppLnItemAndWave = new Map<OpportunityLineItem,String>();
    private Set<Id> setWave2ProductIds = new Set<Id>();
    private Map<Id,Customer_Order__c> mapWave1OppAndCustomerOrder = new Map<Id,Customer_Order__c>();
    private Map<Id,Customer_Order__c> mapWave2OppAndCustomerOrder = new Map<Id,Customer_Order__c>();
    private Map<OpportunityLineItem,Customer_Order__c> mapWave1LineItmAndCustomerOrders = new Map<OpportunityLineItem,Customer_Order__c>();
    private Map<OpportunityLineItem,Customer_Order__c> mapWave2LineItmAndCustomerOrders = new Map<OpportunityLineItem,Customer_Order__c>();
    
    private List<giic_Product_Pricebook_Mapping__c> lstPromotionMappingwithBranch=new List<giic_Product_Pricebook_Mapping__c>();
    private List<giic_Product_Pricebook_Mapping__c> lstPromotionMappingwithoutBranch=new List<giic_Product_Pricebook_Mapping__c>();
     private List<giic_Product_Pricebook_Mapping__c> lstPricebookMappingwithBranch=new List<giic_Product_Pricebook_Mapping__c>();
    private List<giic_Product_Pricebook_Mapping__c> lstPricebookMappingwithoutBranch=new List<giic_Product_Pricebook_Mapping__c>();
    private Map<Id,Boolean> mapOpportunityAndHasCustomerOrder = new Map<Id,Boolean>();
    public Date ResultedDate;
    /**
    *   Called from Start Method - Logic to check Pilot Branch logic.
    *
    **/  
    public Set<Id> checkForPilotBranchLogic(){
        List<Pilot_Product__c> pilotProducts = new List<Pilot_Product__c>();
        // Fetch pilot branch and all related products that qualify for pilot on basis of Pilot Date.
        for(Pilot__c pilotBranch : [SELECT Branch__c,Branch__r.Name, Install_Pilot__c, Id,
                                       (SELECT Id, Pilot__c, Active__c, Pilot_Date__c,wave2PilotDate__c, Product__c,Product__r.Name FROM Pilot_Products__r 
                                        where Active__c = true and (Pilot_Date__c <= Today OR wave2PilotDate__c <= TODAY)) 
                                       FROM Pilot__c where Install_Pilot__c = true]){
            pilotProducts = new List<Pilot_Product__c>();
            for(Pilot_Product__c pilotProduct : pilotBranch.Pilot_Products__r){
                pilotProducts.add(pilotProduct);
            }
            // Map to hold Pilot Branches and corresponding pilot products.
            pilotBranchMap.put(pilotBranch.Branch__c,pilotProducts);
            
        }
        system.debug('What is pilotBranchMap>>'+pilotBranchMap);
        return pilotBranchMap.keyset();
    }
    
    /**
    *   Called from Execute Method - Logic to collect information w.r.t each Consultation.
    *
    **/
    public void getConsultationDetails(List<Opportunity> consultations){
        
        checkForPilotBranchLogic();
        Set<Id> consultationIds = new Set<Id>();

        // Method to collect Notes from Consultations
          collectNotesfromConsultations(consultations);

        for(Opportunity con : consultations){
            consultationIds.add(con.id);
        }
        
        // Method to collect files from Consultations
        if(consultationIds !=null && consultationIds.size() > 0){
            collectFilesfromConsultations(consultationIds);
        } 
        
        for(Opportunity con : consultations){
           // Method to collect Notes from Consultations
           // collectNotesfromConsultations(con);

            // Method to check for PilotConsultationLineItems
            checkPilotConsultationLineItems(con);
        }
          
          
        
    }

    /**
    *   Logic to fetch Payments for Wave 2 Consultation.
    *
    **/  
    private void collectPaymentsfromConsultations(Opportunity opp){
        // For Wave 2 Pilot Logic.
        List<Payment__c> listOfPayments = new  List<Payment__c>();

        for(Payment__c pmt: opp.Payments__r){
            listOfPayments.add(pmt);
        }
        if(listOfPayments !=null && listOfPayments.size() > 0){
            mapConsultationPayments.put(opp.Id,listOfPayments);
        }        
    }

    /**
    *   Logic to create Customer Order for associated Opportunity Line Item.
    *
    **/  
    private void getCustomerOrderForConsultations(OpportunityLineItem oppLnItm,Opportunity opp){
        
        if(mapOppLnItemAndWave.get(oppLnItm) == 'Wave1'){
            if(mapWave1OppAndCustomerOrder.containsKey(opp.Id)){
                Customer_Order__c custOrder = mapWave1OppAndCustomerOrder.get(opp.Id);
                mapWave1LineItmAndCustomerOrders.put(oppLnItm,custOrder);
            }else{
                Customer_Order__c custOrder = new Customer_Order__c();
                custOrder.Name = 'Test Customer Wave 1';
                custOrder.Wave_Type__c='Wave1';
                custOrder.Sales_Date__c= ResultedDate;
                custOrder.RecordTypeId  = Schema.SObjectType.Customer_Order__c.getRecordTypeInfosByName().get('Customer Order Wave1').getRecordTypeId();
                // Data for Customer Order to be populated using below method.
                populateCustomerOrderDetails(custOrder,oppLnItm,opp);
                mapWave1LineItmAndCustomerOrders.put(oppLnItm,custOrder);
                mapWave1OppAndCustomerOrder.put(opp.Id,custOrder);
            }           
        }else if(mapOppLnItemAndWave.get(oppLnItm) == 'Wave2'){
            if(mapWave2OppAndCustomerOrder.containsKey(opp.Id)){
                Customer_Order__c custOrder = mapWave2OppAndCustomerOrder.get(opp.Id);
                mapWave2LineItmAndCustomerOrders.put(oppLnItm,custOrder);
            }else{
                Customer_Order__c custOrder = new Customer_Order__c();
                custOrder.Name = 'Test Customer Wave 2';
                custOrder.Wave_Type__c='Wave2';
                custOrder.Sales_Date__c= ResultedDate;
                custOrder.RecordTypeId = Schema.SObjectType.Customer_Order__c.getRecordTypeInfosByName().get('Customer Order Wave2').getRecordTypeId();
                // Data for Customer Order to be populated using below method.
                populateCustomerOrderDetails(custOrder,oppLnItm,opp);
                mapWave2LineItmAndCustomerOrders.put(oppLnItm,custOrder);
                mapWave2OppAndCustomerOrder.put(opp.Id,custOrder);
            } 
        }
    }
    
    /**
    *   Logic to populate Customer Order Details
    *
    **/
    private void populateCustomerOrderDetails(Customer_Order__c custOrder,OpportunityLineItem oppLnItm,Opportunity opp){
        custOrder.Opportunity__c=oppLnItm.OpportunityId;
        custOrder.is_SCN__c = opp.is_SCN__c;// ADDED BY SHARIF FOR SCN PORTAL
        if(opp.is_SCN__c) // ADDED BY SHARIF if IS SCN is true on opportunity then customer order owner will be same as opportunity owner
            custOrder.ownerid = opp.ownerid;
        
        custOrder.Sales_Consultant__c=opp.Sales_Consultant__c;
        if(opp.Confirn_2nd_SC_Ride__c && opp.X2nd_SC__r != null ){
            custOrder.Second_Sales_Consultant__c= opp.X2nd_SC__r.CKSW_BASE__User__c;
        }   
        if(opp.Sales_Consultant__r != null){
            custOrder.Additional_Sales_Consultant__c = opp.Sales_Consultant__r.CKSW_BASE__User__c;
        }
        if(mapConsultationAppointments != null && mapConsultationAppointments.size() > 0 && mapConsultationAppointments.containsKey(opp.Id)){
            custOrder.Appointment__c = mapConsultationAppointments.get(opp.Id).id;
            custOrder.Install_City__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__City__c;
            custOrder.Install_Country__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__Country__c;
            custOrder.Install_State__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__State__c;
            custOrder.Install_Street__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__Street__c;
            custOrder.Install_Zip_Code__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__Zip__c;                                        
        }
        custOrder.Customer__c=opp.AccountId;
        custOrder.Original_Amount__c = opp.Total_Contract_Amount__c;
        custOrder.Billing_Name__c=opp.Account.Name;
        custOrder.Billing_City__c=opp.Account.billingCity;
        custOrder.Billing_Street__c=opp.Account.billingStreet;
        custOrder.Billing_State_Province__c=opp.Account.billingState;
        custOrder.Billing_Zip_Postal_Code__c=opp.Account.billingPostalCode;
        custOrder.Billing_Country__c=opp.Account.billingCountry;
        custOrder.Install_Branch__c = giic_CommonUtils.getSalesBranch(opp.Branch__c).Install_Branch__c;
        custOrder.LMS_Lead_ID__c=opp.LMS_Lead_ID__c;
        custOrder.Referral_Store__c=opp.Referral_Store__c;
        custOrder.giic_Resulted_DateTime__c=opp.Resulted_DateTime__c;
        custOrder.Sales_Branch__c=opp.Branch__c;
        custOrder.Siebel_Lead_ID__c=opp.Siebel_Lead_ID__c;
        custOrder.Store_Name__c=opp.Store__c;                                                                                                                                                           
        //Added to Update Total Siebel Customer Paid Amountfrom Opportunity Line Items to 
        //Customer Order
        custOrder.Customer_Paid_Amount__c=opp.Current_Total_Paid_Amount__c;
    }
    
    /**
    *   Logic to check Pilot Branches for each Consultation and Wave 2 functionality.
    *
    **/     
    private void checkPilotConsultationLineItems(Opportunity opp){
        List<OpportunityLineItem> pilotedConsultationLineItems = new List<OpportunityLineItem>();
    ResultedDate = null;
        ResultedDate = Date.newInstance(opp.Resulted_DateTime__c.year(),opp.Resulted_DateTime__c.Month(),opp.Resulted_DateTime__c.day());
        system.debug('Wave Date>>>'+ ResultedDate);
        for(OpportunityLineItem oppLnItm : opp.OpportunityLineItems){  
            if(pilotBranchMap != null && pilotBranchMap.size() > 0){
                for(Pilot_Product__c pilPro : pilotBranchMap.get(opp.Branch__c)){
                    // For Wave 1B pilot logic for Kitchen products.
                    system.debug('LnItm Resulted Date'+ResultedDate);
                    if( pilPro.wave2PilotDate__c == null && ResultedDate >= pilPro.Pilot_Date__c &&
                        (pilPro.Product__r.Name=='Backsplash' || pilPro.Product__r.Name=='Countertops' || pilPro.Product__r.Name=='Cabinet Refacing')){
                        mapOpportunityAndHasCustomerOrder.put(oppLnItm.id,true);
                    }
                    system.debug('Opp Cust Order'+mapOpportunityAndHasCustomerOrder);
                    //Collect Product Id to fetch all associated Product References with Additional Charges

                    if(pilPro.wave2PilotDate__c !=null){
                        if(oppLnItm.Product2Id == pilPro.Product__c && ResultedDate >= pilPro.wave2PilotDate__c){
                            mapOppLnItemAndWave.put(oppLnItm,'Wave2');
                            collectPaymentsfromConsultations(opp);
                            setWave2ProductIds.add(oppLnItm.Product2Id);
                            pilotedConsultationLineItems.add(oppLnItm);
                            serviceProduct2Ids.add(oppLnItm.Product2Id);
                            mapOpportunityAndHasCustomerOrder.put(oppLnItm.id,true);
                            getCustomerOrderForConsultations(oppLnItm,opp);
                            
                        }
                    }else if(oppLnItm.Product2Id == pilPro.Product__c && ResultedDate >= pilPro.Pilot_Date__c){
                        pilotedConsultationLineItems.add(oppLnItm);
                        mapOppLnItemAndWave.put(oppLnItm,'Wave1');
                        serviceProduct2Ids.add(oppLnItm.Product2Id);
                        getCustomerOrderForConsultations(oppLnItm,opp);
                        
                    }
                }   
            }  
        }
        system.debug('Am I pilot'+pilotedConsultationLineItems);
        if(pilotedConsultationLineItems !=null && pilotedConsultationLineItems.size() > 0){
            opportunityLineItemsMap.put(opp.Id,pilotedConsultationLineItems);
            opportunityMap.put(opp.Id,opp);
        }
    }
    
    /**
    *   Logic to collect Notes for each Consultation.
    *
    **/
    /*  
     private void collectNotesfromConsultations(Opportunity opp){
        formatedNotes = '<ul>';
        
        // Copy notes from each consultation.
        for(Note note : opp.Notes){
            if(note.body != null){
                formatedNotes+='<li>'+note.body.escapeXML().escapeHTML4()+'</li>';
            }
        }
        
        // Copy notes from last created Appointment related to each consultation.
        for(CKSW_BASE__Service__c CBS : opp.Services__r){
            for(Note note: [Select id,parentid,body from Note where parentid=:CBS.id]){
                if(note.body != null){
                    formatedNotes+='<li>'+note.body.escapeXML().escapeHTML4()+'</li>';
                }
            }
            mapConsultationAppointments.put(opp.Id,CBS);
        }
        
        formatedNotes+='</ul>';
        consultationNotes.put(formatedNotes,opp.Id);
       
        //Clearing value after each Consultation
        formatedNotes = '';
    }*/
    
    /*
     private void collectNotesfromConsultations(Opportunity opp){
        formatedNotes = '<ul>';
        
        String regexpattern=giic_CommonUtils.getERPOrgWideDefaults('Enabale_Notes_Special_Characters').Target_Value__c ;
        
        // Copy notes from each consultation.
        for(Note note : opp.Notes){
            if(note.body != null){
                formatedNotes+='<li>'+note.body.replaceAll(regexpattern,'')+'</li>';
            }
        }
        
        // Copy notes from last created Appointment related to each consultation.
        for(CKSW_BASE__Service__c CBS : opp.Services__r){
            for(Note note: [Select id,parentid,body from Note where parentid=:CBS.id]){
                if(note.body != null){
                    formatedNotes+='<li>'+note.body.replaceAll(regexpattern,'')+'</li>';
                }
            }
            mapConsultationAppointments.put(opp.Id,CBS);
        }
        
        //formatedNotes=formatedNotes.replaceAll(regexpattern,'');
        formatedNotes+='</ul>';
        consultationNotes.put(formatedNotes,opp.Id);
        
        //Clearing value after each Consultation
        formatedNotes = '';
       
        
    }*/
    
    private void collectNotesfromConsultations(List<Opportunity> lstofOpportunity){
        
        Map<Id,Id> AppointmentToOppMap=new Map<Id,Id>();
        Map<Id,String> OpportunityToNotesMap=new Map<Id,String>(); 
        
        String regexpattern=giic_CommonUtils.getERPOrgWideDefaults('Enabale_Notes_Special_Characters').Target_Value__c ;
        
        // Copy notes from each consultation.
        for(Opportunity opp:lstofOpportunity)
        {
            formatedNotes = '<ul>';
            for(Note note : opp.Notes){
                if(note.body != null){
                    formatedNotes+='<li>'+note.body.replaceAll(regexpattern,'')+'</li>';
                }               
            }
            
            OpportunityToNotesMap.put(opp.Id,formatedNotes);
            
            
            // Copy notes from last created Appointment related to each consultation.
            for(CKSW_BASE__Service__c CBS : opp.Services__r){
                //for(Note note: [Select id,parentid,body from Note where parentid=:CBS.id]){
                //  if(note.body != null){
                //      formatedNotes+='<li>'+note.body.replaceAll(regexpattern,'')+'</li>';
                //  }
                //}//
                AppointmentToOppMap.put(CBS.Id,opp.Id);
                mapConsultationAppointments.put(opp.Id,CBS);
            }
        }
        
        if(AppointmentToOppMap!=null && !AppointmentToOppMap.isEmpty())
        {   
           for(Note note: [Select id,parentid,body from Note where parentid IN:AppointmentToOppMap.keyset()])
            {
                if(note.body != null)
                {                   
                    String tempnote='<li>'+note.body.replaceAll(regexpattern,'')+'</li>';
                    
                    Id OpportunityId = AppointmentToOppMap.get(note.parentid) ;
                    
                    if(OpportunityId!=null)
                    {
                        if(OpportunityToNotesMap.containsKey(OpportunityId))
                        {   
                            formatedNotes=OpportunityToNotesMap.get(OpportunityId);
                            formatedNotes=formatedNotes+tempnote;
                            
                        }
                        else
                        {
                            formatedNotes=tempnote;
                        }
                        
                        OpportunityToNotesMap.put(OpportunityId,formatedNotes);
                    }   
                }
            }
            
            
        }
        
        if(OpportunityToNotesMap!=null && !OpportunityToNotesMap.isEmpty())
        {
            for( Id oppid:OpportunityToNotesMap.keyset())
            {
                formatedNotes=OpportunityToNotesMap.get(oppid);
                formatedNotes+='</ul>';
                consultationNotes.put(formatedNotes,oppid);
            }
        }
        
    }
    
    /**
    *   Logic to collect Files for Consultations.
    *
    **/ 
    private void collectFilesfromConsultations(Set<Id> consultationIds){
                                 
        for(ContentDocumentLink ContentDocumentLink : [SELECT Id, LinkedEntityId, ContentDocumentId,
                                                            ContentDocument.FileType 
                                                            FROM ContentDocumentLink 
                                                            WHERE LinkedEntityId IN :consultationIds]){
            List<Id> contentDocumentIds = new List<Id>();
            //Consider only Files
            if(ContentDocumentLink.ContentDocument.FileType != 'SNOTE'){
                if(consultationFiles.containsKey(ContentDocumentLink.LinkedEntityId)){
                    consultationFiles.get(ContentDocumentLink.LinkedEntityId).add(ContentDocumentLink.ContentDocumentId);
                }else{
                    contentDocumentIds = new List<Id>{ContentDocumentLink.ContentDocumentId};
                    consultationFiles.put(ContentDocumentLink.LinkedEntityId,contentDocumentIds);
                }
            }
        }
    }
    
    /**
    *   Called by Execute Method
    *   Initialize variables used to automate creation of Service Order lines and Sales Order Additional Charges.
    *   1) Query Product References with Additional Charges
    *   2) Associate Additional Charges to a Service Product
    **/
    public void initializeVariablesForAutomation() {                           
        
        //Query Product References along with Additional Charges
        List<gii__Product2Add__c> productRefs = [Select id, gii__ProductReference__c,
                                (select id, gii__UnitPrice__c, gii__UnitCost__c, gii__UnitofMeasure__c, giic_Commisionable__c from gii__Additional_Charges__r)
                                from gii__Product2Add__c where gii__ProductReference__c in: serviceProduct2Ids];
        //Associate Additional Charges to a Service Product
        system.debug('jjjjjjjjjjjjj'+productRefs+'ggggggggggggg'+setWave2ProductIds);
        for (gii__Product2Add__c productRef : productRefs) {
            if(setWave2ProductIds != null && setWave2ProductIds.contains(productRef.gii__ProductReference__c)){
                continue;
            }
            product2IdToProductReferenceIdMap.put(productRef.gii__ProductReference__c, productRef.Id);
            Id serviceProduct2Id = productRef.gii__ProductReference__c;
            for (gii__AdditionalCharge__c additionalCharge : productRef.gii__Additional_Charges__r) {
                if (product2IdToAdditionalChargesMap.get(serviceProduct2Id) != null) {
                    product2IdToAdditionalChargesMap.get(serviceProduct2Id).add(additionalCharge);
                } else {
                    List<gii__AdditionalCharge__c> lstAddlCharge = new List<gii__AdditionalCharge__c>();
                    lstAddlCharge.add(additionalCharge);
                    product2IdToAdditionalChargesMap.put(serviceProduct2Id, lstAddlCharge);
                }           
            }
        }  
        system.debug('What is in the nmap'+product2IdToAdditionalChargesMap);
        //Murali:5/5/2017: Associate Sales Order with Pricebook and Promotion - Starts
        list <giic_Product_Pricebook_Mapping__c> lstPriceBookPromotions = [Select giic_Assignment_Type__c,giic_Branch__c,giic_Promo_Effective_Start_Date__c,giic_Promo_Effective_End_Date__c,giic_Product_Type__r.gii__ProductReference__r.Id, giic_Promotion__c,giic_Glovia_Price_Book__r.Name,giic_Glovia_Price_Book__r.giic_Wave_Type__c,giic_Glovia_Price_Book__r.giic_State__c 
                                                                           from giic_Product_Pricebook_Mapping__c where giic_Product_Type__r.gii__ProductReference__r.Id in :serviceProduct2Ids];                
        for (giic_Product_Pricebook_Mapping__c ppMapping : lstPriceBookPromotions) {
           if(ppMapping.giic_Assignment_Type__c.equalsIgnoreCase('Pricebook')) 
            {
              /* if(ppMapping.giic_Glovia_Price_Book__r.giic_State__c !=null){
                product2IdToPriceBookPromotionMap.put(ppMapping.giic_Product_Type__r.gii__ProductReference__r.Id+ppMapping.giic_Glovia_Price_Book__r.giic_State__c+ppMapping.giic_Glovia_Price_Book__r.giic_Wave_Type__c,ppMapping);
               }else{
                product2IdToPriceBookPromotionMap.put(ppMapping.giic_Product_Type__r.gii__ProductReference__r.Id+ppMapping.giic_Glovia_Price_Book__r.giic_Wave_Type__c,ppMapping);
               }*/
               if(ppMapping.giic_Branch__c!=null)
                { 
                  lstPricebookMappingwithBranch.add(ppMapping);
                }
                else
                {
                  lstPricebookMappingwithoutBranch.add(ppMapping);  
                } 
            }
            else if(ppMapping.giic_Assignment_Type__c.equalsIgnoreCase('Promotion'))
            {   
                if(ppMapping.giic_Branch__c!=null)
                { 
                  lstPromotionMappingwithBranch.add(ppMapping);
                }
                else
                {
                  lstPromotionMappingwithoutBranch.add(ppMapping);  
                }   
                
            }   
        } 
        //Murali:5/5/2017: Associate Sales Order with Pricebook and Promotion - Ends
    }
    
    /**
    *  Method to convert Sales Order w.r.t each Consultation Product that returns newly created Sales Order Ids.
    *
    **/ 
    public void createSalesOrder(){
        
        List<gii__SalesOrder__c> listSalesOrders= new List<gii__SalesOrder__c>();
        List<Payment__c> listOfSalesOrderPayments = new List<Payment__c>();
        List<gii__SalesOrder__Share> listSalesOrderSharing= new List<gii__SalesOrder__Share>();
        List<ContentDocumentLink> contentDocumentLinks = new List<ContentDocumentLink>();
        List<ContentNote> contentNotes = new List<ContentNote>();
        List<Task> TasksList=new List<Task>();
        Map<Id, List<Opportunity_Product_Tax__c>> OppToProductTaxMap = new Map<Id, List<Opportunity_Product_Tax__c>>();
        
        List<Opportunity_Product_Tax__c> lstofOpportunityProductTax = new List<Opportunity_Product_Tax__c>();
        lstofOpportunityProductTax= [select id,Product__c,Taxable_Product__c,Product_Tax_Rate__c, opportunity__c from Opportunity_Product_Tax__c where opportunity__c IN:opportunityMap.keyset()];
        
        if(lstofOpportunityProductTax!=null && !lstofOpportunityProductTax.isEmpty())
        {
            for(Opportunity_Product_Tax__c opptax: lstofOpportunityProductTax)
            {
                List<Opportunity_Product_Tax__c> tempopptax=new List<Opportunity_Product_Tax__c>();
                
                if(OppToProductTaxMap.containsKey(opptax.opportunity__c))
                {
                    tempopptax=OppToProductTaxMap.get(opptax.opportunity__c);
                    tempopptax.add(opptax);
                }
                else
                {
                    tempopptax.add(opptax);
                    OppToProductTaxMap.put(opptax.opportunity__c,tempopptax);
                }   
            }
        }   
        
        
        // Insert Customer Orders for respective Wave 1 and Wave 2. 
        if(mapWave1OppAndCustomerOrder !=null && mapWave1OppAndCustomerOrder.size()>0){
            insert mapWave1OppAndCustomerOrder.values();
        }if(mapWave2OppAndCustomerOrder !=null && mapWave2OppAndCustomerOrder.size()>0){
            insert mapWave2OppAndCustomerOrder.values();
        }
        
        for(Opportunity opp : opportunityMap.values()){
        
             // Associate Payments to Customer Order
            if(mapConsultationPayments !=null && mapConsultationPayments.containsKey(opp.Id)){
                for(Payment__c pmt : mapConsultationPayments.get(opp.Id)){
                   if(mapWave2OppAndCustomerOrder !=null && mapWave2OppAndCustomerOrder.containsKey(opp.id)){
                       pmt.Customer_Order__c = mapWave2OppAndCustomerOrder.get(opp.id).id;
                       //generate COM TRANS ID,Transaction_Date__c and COM_Payment_Status__c for COM integration
                       if(pmt.COM_Payment_Type__c != null && !pmt.COM_Payment_Type__c.equalsIgnoreCase('CK')){
                         pmt.COM_Trans_id__c = String.valueOf(pmt.Authorization_Code_Enc__c) + '_' + pmt.name;
                         pmt.Payment_Status__c = 'Authorization';
                       }
                       pmt.Transaction_Date__c = pmt.createdDate != null ? pmt.createdDate.date() : null; 
                       listOfSalesOrderPayments.add(pmt);
                   } 
                }
            }
            Map<OpportunityLineItem,String> mapOppLnItemAndWave = new Map<OpportunityLineItem,String>();
            for(OpportunityLineItem oppLntm : opportunityLineItemsMap.get(opp.Id)){
                listSalesOrders.add(getSalesOrder(opp, oppLntm ,OppToProductTaxMap)); 
            }         
        }

        try{
            
            
            // Insert Sales Orders
            if(listSalesOrders !=null && listSalesOrders.size() > 0){
                system.debug('About to insert Sales Orders'+listSalesOrders);
                Database.SaveResult[] srList = Database.insert(listSalesOrders,false);
                system.debug('What is the result'+srList);
                // Iterate through each returned result
                for (Database.SaveResult sr : srList) {
                    if (sr.isSuccess()) {
                        // Gather newly inserted Sales Order Ids.
                        setNewSalesOrderIds.add(sr.getId());
                    }
                }
            }
            populateConsultationSalesOrderMap(listSalesOrders);
            listSalesOrderSharing.addAll(shareRecords(listSalesOrders));
            // Insert sharing Records of Sales Orders.
            if(listSalesOrderSharing !=null && listSalesOrderSharing.size() > 0){
                Database.SaveResult[] SR = Database.insert(listSalesOrderSharing,false);
                
                for(Integer i=0;i<SR.size();i++){
                    if(!SR[i].isSuccess())
                    {
                        // Operation failed, so get all errors                
                        for(Database.Error err : SR[i].getErrors()) {
                                          
                            String logStr = 'Share Records Insert : '+ listSalesOrderSharing.get(i)+'\nError: '+err.getStatusCode() + ': ' + err.getMessage();
                            Logger.addDebugLog('giic_ConsultationToSalesOrderBatchHelper: Share Insert Error', logStr, JobManagementConstant.LOB_HDI, true);//Forcing to write debug
                        
                        }
                    
                    }
                }
                Logger.saveLogs();  
            }

            contentDocumentLinks.addAll(getSalesOrderFileLinks());
            // Insert ContentDocumentLink to Share Consultation Files with Sales Order
            if(contentDocumentLinks != null && contentDocumentLinks.size() > 0){
                Database.insert(contentDocumentLinks,false);
            }
            if(!consultationNotes.isEmpty()){
                contentNotes = getContentNotes();
                System.debug('What are my notes >>>>>'+contentNotes);
                Database.insert(contentNotes,false);
                Database.insert(getSalesOrderNoteLinks(contentNotes),false);
            }

            
            List<gii__SalesOrderAdditionalCharge__c> salesOrderAdditionalCharges = new List<gii__SalesOrderAdditionalCharge__c>();
          //  //Add Service Order lines
            List<gii__ServiceOrderLine__c> serviceOrderLines = new List<gii__ServiceOrderLine__c>();
            
            for (gii__SalesOrder__c salesOrder : listSalesOrders) {
             /*   gii__ServiceOrderLine__c serviceOrderLine = new gii__ServiceOrderLine__c();
                
                serviceOrderLine.gii__SalesOrder__c = salesOrder.Id;
                serviceOrderLine.gii__Product__c = product2IdToProductReferenceIdMap.get(salesOrder.giic_Product_Reference__c);
                serviceOrderLine.gii__OrderQuantity__c = 1.0;
                serviceOrderLine.gii__UnitPrice__c = 0;
                serviceOrderLine.gii__NoChargeReason__c = 'Sample';//Some reason to be provided when Unit Price is zero
                serviceOrderLines.add(serviceOrderLine); */
                //Add SO Additional charges for Products having Additional Charges
                system.debug('ddddddddddd'+product2IdToAdditionalChargesMap+'sssssssssssssss'+salesOrder.giic_Product_Reference__c);
                if(product2IdToAdditionalChargesMap!=null && product2IdToAdditionalChargesMap.containsKey(salesOrder.giic_Product_Reference__c)){
                    for (gii__AdditionalCharge__c additionalCharge : product2IdToAdditionalChargesMap.get(salesOrder.giic_Product_Reference__c)) {
                        gii__SalesOrderAdditionalCharge__c salesOrderAdditionalCharge = new gii__SalesOrderAdditionalCharge__c();

                        salesOrderAdditionalCharge.gii__AdditionalCharge__c = additionalCharge.Id;
                        salesOrderAdditionalCharge.gii__SalesOrder__c = salesOrder.Id;
                        salesOrderAdditionalCharge.gii__Quantity__c = 1.0;
                        salesOrderAdditionalCharge.Commissionable__c = additionalCharge.giic_Commisionable__c;
                        salesOrderAdditionalCharge.gii__UnitPrice__c = additionalCharge.gii__UnitPrice__c;

                        if(salesOrderAdditionalCharge.gii__UnitPrice__c == 0 || salesOrderAdditionalCharge.gii__UnitPrice__c == null){
                            salesOrderAdditionalCharge.gii__NoChargeReason__c = 'Sample';                    
                        }

                        salesOrderAdditionalCharges.add(salesOrderAdditionalCharge);
                    }
                }                
            }

            //Update Sales Order Payments
            if(!listOfSalesOrderPayments.isEmpty()){
                Database.update(listOfSalesOrderPayments,false);
            }

          /*  //Insert Service Order lines
            if(!serviceOrderLines.isEmpty()){
                Database.insert(serviceOrderLines,false);
            }   */
            //Insert Sales Order Additional Charges
            system.debug('What is the SalesOrder Charge>>>>'+salesOrderAdditionalCharges);
            if(!salesOrderAdditionalCharges.isEmpty()){
                Database.insert(salesOrderAdditionalCharges,false);
                //Pujitha - Remove multiple added fee's added to Kitchen products
                removeadminfee(listSalesOrders);
            }                                      
        // Catch any exceptions and capture as a Logger record.    
        }catch(Exception ex){
            system.debug('Error'+ex);
            Logger.addDebugLog('giic_ConsultationToSalesOrderBatchHelper: Execute', 'Exception = ' + ex.getMessage(), JobManagementConstant.LOB_HDI);
            Logger.logException('giic_ConsultationToSalesOrderBatchHelper: Execute', ex, JobManagementConstant.LOB_HDI);
        }finally{
            Logger.saveLogs();
        }
    }
    //Pujitha - Remove multiple added fee's added to Kitchen products
    public void removeadminfee(List<gii__SalesOrder__c> Salesorderlist){
        Set<Id> soId = new Set<Id>();
        Map<id, List<gii__Salesorder__c>> cosomap = new Map<id, List<gii__Salesorder__c>>();
        for(gii__SalesOrder__c so: Salesorderlist){
            if (cosomap.get(so.Customer_Order__c) != null) {
                    cosomap.get(so.Customer_Order__c).add(so);
                }
            else {
                    List<gii__SalesOrder__c> SOrder = new List<gii__SalesOrder__c>();
                    SOrder.add(so);
                    cosomap.put(so.Customer_Order__c, SOrder);
                }  
        }
        for(id cid: cosomap.keyset()){
            if(cosomap.get(cid).size()==2 || cosomap.get(cid).size()==3){
                for(gii__SalesOrder__c s: cosomap.get(cid)){
                    if(s.giic_Product_Reference__c != Label.Product_Backsplash){
                        soId.add(s.Id);
                    }
                }
            }
        }
        if(soId.size()>1){
           
            List<gii__SalesOrderAdditionalCharge__c> lstAddfee = [Select id from gii__SalesOrderAdditionalCharge__c where gii__SalesOrder__r.giic_Product_Reference__r.Name='Countertops' and gii__AdditionalCharge__r.ENT_fee_code__c='901' and gii__SalesOrder__c IN: soId];
            try{
                if(!lstAddfee.IsEmpty()){
                    database.delete(lstAddfee, false); 
                }
            }
            catch(Exception e){
                
            }
                        
        }
    }
    
    /**
    *  Method to update Converted checkbox on Consultations to true based on successful creation of Sales Orders.
    *
    **/ 
    public void updateConversionCheckboxOnConsultation(){
        Map<Id,Opportunity> mapUpdateConsultations = new Map<Id,Opportunity>();
        system.debug('Is there any success'+ setNewSalesOrderIds);
        if(setNewSalesOrderIds != null && setNewSalesOrderIds.size() > 0){
            for(gii__SalesOrder__c salesOrd:[Select Id,gii__Opportunity__c from gii__SalesOrder__c where id in:setNewSalesOrderIds]){
                Opportunity opp = new Opportunity();
                opp.id = salesOrd.gii__Opportunity__c;
                opp.giic_Batch_Conversion_To_Job__c = true;
                mapUpdateConsultations.put(opp.id,opp);
            }
        }   
        if(mapUpdateConsultations !=null && mapUpdateConsultations.size() > 0){
            Database.update(mapUpdateConsultations.values());
        } 
    }
    
    /**
    *  Method to get Sales Order object based on Opportunity and OpportunityLineItem
    *  @param Opportunity opp
    *  @param OpportunityLineItem oppLntm
    *  @return gii__SalesOrder__c salesOrd
    **/
    private gii__SalesOrder__c getSalesOrder(Opportunity opp, OpportunityLineItem oppLntm, Map<Id,List<Opportunity_Product_Tax__c>> OppToProductTaxMap){
        //Map<Id, Opportunity_Product_Tax__c> mapOfOppAndTax = new Map<Id, Opportunity_Product_Tax__c>([select id,Product__c,Taxable_Product__c,Product_Tax_Rate__c, opportunity__c from Opportunity_Product_Tax__c where opportunity__c=:opp.Id]);
        Map<Id, Opportunity_Product_Tax__c> mapOfProdAndTax = new Map<Id, Opportunity_Product_Tax__c>();
        
        /*
        if(mapOfOppAndTax!=Null && mapOfOppAndTax.size()>0){
          for(Opportunity_Product_Tax__c maptax: mapOfOppAndTax.values()){
            mapOfProdAndTax.put(maptax.Product__c, maptax);
          }
        }*/
        
        if(OppToProductTaxMap!=Null && OppToProductTaxMap.size()>0){
            
            if(OppToProductTaxMap.get(opp.Id)!=null)
            {
              for(Opportunity_Product_Tax__c maptax: OppToProductTaxMap.get(opp.Id)){
                mapOfProdAndTax.put(maptax.Product__c, maptax);
                }
            }
        }

        gii__SalesOrder__c salesOrd = new gii__SalesOrder__c();
        salesOrd.gii__Account__c = opp.AccountId;

        // Populate Customer Email
        salesOrd.Customer_Email__c = opp.Account.PersonEmail;
        
        // Populate Customer First name (Seyed/Satheesh added this line for LMS on 06/04/2018)
        if(opp.Account.Name !=null)
        {
            salesOrd.First_Name__c = opp.Account.Name.substringBefore(' ');
        }

        // Populate Friencode (Seyed/Satheesh added this line for LMS on 06/18/2018)
            salesOrd.FriendCode__c = opp.FriendCode__c;
        
        salesOrd.gii__Opportunity__c=opp.id;
        salesOrd.is_SCN__c = opp.is_SCN__c;// ADDED BY SHARIF FOR SCN PORTAL
        if(opp.is_SCN__c) // ADDED BY SHARIF if IS SCN is true on opportunity then sales order owner will be same as opportunity owner
            salesOrd.ownerid = opp.ownerid;
        salesOrd.gii__OrderType__c='Standard';

        // The Payment Amount & Status Line are added for the Customer Paid Story By Raju
        salesOrd.giic_Payment_Amount__c = oppLntm.Current_Paid_Amount__c;
        salesOrd.Siebel_Paid_Status__c = oppLntm.Siebel_Lead_Status__c;
        salesOrd.giic_Customer_Comments__c=opp.Customer_Comments__c;

        if(mapWave2LineItmAndCustomerOrders !=null && mapWave2LineItmAndCustomerOrders.containsKey(oppLntm)){
            salesOrd.Customer_Order__c =  mapWave2LineItmAndCustomerOrders.get(oppLntm).id;
            salesOrd.gii__OrderDate__c=mapWave2LineItmAndCustomerOrders.get(oppLntm).Sales_Date__c;
        }else if(mapWave1LineItmAndCustomerOrders !=null && mapWave1LineItmAndCustomerOrders.containsKey(oppLntm)){
            salesOrd.Customer_Order__c =  mapWave1LineItmAndCustomerOrders.get(oppLntm).id;
            salesOrd.gii__OrderDate__c=mapWave1LineItmAndCustomerOrders.get(oppLntm).Sales_Date__c;
        }

        if(mapOpportunityAndHasCustomerOrder !=null && mapOpportunityAndHasCustomerOrder.containsKey(oppLntm.id)){
            salesOrd.giic_Has_Customer_Order__c = true;   
        }
        Mapping_Master_Setting__mdt MapMster = MapJobStatusAndSubStatus(opp.StageName,opp.Disposition__c);

        if(MapMster != null){
            salesOrd.giic_Job_Status__c = MapMster.Target_Field1__c;
            salesOrd.giic_Job_Sub_Status__c = MapMster.Target_Field2__c;
        }

        //salesOrd.giic_Payment_Amount__c=opp.Payment_Amount__c; // Payment Amount production bug fix
    
        salesOrd.giic_Payment_Date__c=opp.Payment_Date__c;
        salesOrd.giic_Payment_Status__c=opp.Payment_Status__c;
        salesOrd.giic_Resulted_DateTime__c=opp.Resulted_DateTime__c;
        salesOrd.giic_Store__c=opp.Store__c;
        salesOrd.giic_Referral_Store__c=opp.Referral_Store__c;
        salesOrd.giic_Sales_Branch__c=opp.Branch__c;
        salesOrd.giic_Sales_Consultant__c=opp.Sales_Consultant__c;
        salesOrd.Product_Tax_Rate_Percent__c = 0.00;
        salesOrd.Price_Adjustment_Tax__c = 0;
        if(salesOrd.Conversion_Tax_Amount__c == Null){
          salesOrd.Conversion_Tax_Amount__c = 0.00;
       }
      salesOrd.giic_Contract_Price__c = oppLntm.TotalPrice;
        //Logic to copy Opp product tax rate percent to Sales Order Date:11/01/2018
        for(Opportunity_Product_Tax__c maptax: mapOfProdAndTax.values()){
          if(maptax.Product__c == oppLntm.Product2Id && mapOfProdAndTax.get(maptax.Product__c).Product_Tax_Rate__c != null && oppLntm.Sales_Amount_Pre_Tax__c != null){
            salesOrd.Tax_Amount__c = oppLntm.Sales_Amount_Pre_Tax__c * (mapOfProdAndTax.get(maptax.Product__c).Product_Tax_Rate__c/100) ;
            salesOrd.Conversion_Tax_Amount__c = oppLntm.Sales_Amount_Pre_Tax__c * (mapOfProdAndTax.get(maptax.Product__c).Product_Tax_Rate__c/100);
            salesOrd.giic_Contract_Price__c = oppLntm.TotalPrice - (oppLntm.Sales_Amount_Pre_Tax__c * (mapOfProdAndTax.get(maptax.Product__c).Product_Tax_Rate__c/100)); //opp.Amount;
            salesOrd.Has_Price_Adjustment_Tax__c = mapOfProdAndTax.get(maptax.Product__c).Taxable_Product__c;
            if(mapOfProdAndTax.get(maptax.Product__c).Product_Tax_Rate__c != 0 && mapOfProdAndTax.get(maptax.Product__c).Taxable_Product__c == True){
               salesOrd.Product_Tax_Rate_Percent__c = mapOfProdAndTax.get(maptax.Product__c).Product_Tax_Rate__c;
            }
          }
        }

        // Comment added by abhik on 04/07/2017---******Added this block to map the last created Appointment of a Consultation to the  Sales Order****************//
        if(mapConsultationAppointments != null && mapConsultationAppointments.size() > 0 && mapConsultationAppointments.containsKey(opp.Id)){
            salesOrd.Appointment__c = mapConsultationAppointments.get(opp.Id).id;
            salesOrd.giic_Install_City_Text__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__City__c;
            salesOrd.giic_Install_Country_Text__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__Country__c;
            salesOrd.giic_Install_State_Text__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__State__c;
            salesOrd.giic_Install_Street_Text__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__Street__c;
            salesOrd.giic_Install_Zip_Code_Text__c= mapConsultationAppointments.get(opp.Id).CKSW_BASE__Zip__c;                                        
        }

        if(opp.Confirn_2nd_SC_Ride__c && opp.X2nd_SC__r != null ){
            salesOrd.giic_Second_Sales_Consultant__c = opp.X2nd_SC__r.CKSW_BASE__User__c;
        }

        if(opp.Sales_Consultant__r != null){
            salesOrd.giic_Sales_Consultant1__c = opp.Sales_Consultant__r.CKSW_BASE__User__c;
        }

         //Changes for Bring Siebel Lead Number from Opportunity Line Item
        salesOrd.ent_Siebel_Lead_ID__c = oppLntm.Siebel_Lead_Number__c;
        //Changes for Bring LMS lead number from Opportunity Line Item
       salesOrd.ent_LMS_Lead_ID__c = oppLntm.LMS_Lead_ID__c;
        
        salesOrd.giic_Product_Name__c = oppLntm.Product2.Name;
    //Mehtab 18Aug17 changes for Assigning Product type to product type picklist for Installer vendor 
        salesOrd.giic_ProductTypePicklist__c = oppLntm.Product2.Name;
        
        salesOrd.giic_Product_Reference__c = oppLntm.Product2Id;
     //   salesOrd.Tax_Amount__c = oppLntm.Tax_Amount__c;
    //Josh 12Oct17 Fix error when tax amount is null
        //if(oppLntm.Tax_Amount__c==null){
            
       //     oppLntm.Tax_Amount__c=0;
     //   }
        //Josh 11Oct17 Original Contract Price no longer includes Tax
        //salesOrd.giic_Contract_Price__c = oppLntm.TotalPrice - oppLntm.Tax_Amount__c; //opp.Amount;    
        salesOrd.giic_Install_Branch__c = giic_CommonUtils.getSalesBranch(opp.Branch__c).Install_Branch__c; 
        salesOrd.Install_Branch_Email__c= giic_CommonUtils.getSalesBranch(opp.Branch__c).Install_Branch__r.Email__c;
        salesOrd.Install_Branch_Phone__c= giic_CommonUtils.getSalesBranch(opp.Branch__c).Install_Branch__r.Phone__c;
        if(salesOrd.giic_Has_Customer_Order__c == true){
            salesOrd.ENT_Result__c = false;
        }else{
            salesOrd.ENT_Result__c = true;
        }
        
      /*  //Murali:5/5/2017: Associate Sales Order with Pricebook and Promotion - Starts
        if (product2IdToPriceBookPromotionMap.containsKey(oppLntm.Product2Id+opp.Branch__r.State_Province__c+mapOppLnItemAndWave.get(oppLntm))) {
            salesOrd.gii__PriceBookName__c = product2IdToPriceBookPromotionMap.get(oppLntm.Product2Id+opp.Branch__r.State_Province__c+mapOppLnItemAndWave.get(oppLntm)).giic_Glovia_Price_Book__r.Name;
            //salesOrd.gii__Promotion__c = product2IdToPriceBookPromotionMap.get(oppLntm.Product2Id+opp.Branch__r.State_Province__c+mapOppLnItemAndWave.get(oppLntm)).giic_Promotion__c;                        
        }else if(product2IdToPriceBookPromotionMap.containsKey(oppLntm.Product2Id+mapOppLnItemAndWave.get(oppLntm))){
            salesOrd.gii__PriceBookName__c = product2IdToPriceBookPromotionMap.get(oppLntm.Product2Id+mapOppLnItemAndWave.get(oppLntm)).giic_Glovia_Price_Book__r.Name;
            //salesOrd.gii__Promotion__c = product2IdToPriceBookPromotionMap.get(oppLntm.Product2Id+mapOppLnItemAndWave.get(oppLntm)).giic_Promotion__c;
        }*/

    system.debug('For each product>>>'+lstPricebookMappingwithBranch+'>>>>'+lstPricebookMappingwithoutBranch);
        if(lstPricebookMappingwithBranch!=null && !lstPricebookMappingwithBranch.isEmpty())
        {
            for(giic_Product_Pricebook_Mapping__c ppmap: lstPricebookMappingwithBranch)
            {
                if(ppmap.giic_Branch__c!=null && opp.Branch__c==ppmap.giic_Branch__c && ppmap.giic_Product_Type__r.gii__ProductReference__r.Id==oppLntm.Product2Id 
                  ) 
                {   system.debug('For each product>>>'+ppmap.giic_Glovia_Price_Book__r.Name);
                    if(ppMap.giic_Glovia_Price_Book__r.giic_State__c !=null && opp.Branch__r.State_Province__c == ppMap.giic_Glovia_Price_Book__r.giic_State__c ){
                        salesOrd.gii__PriceBookName__c=ppmap.giic_Glovia_Price_Book__r.Name;
                    }else if(ppMap.giic_Glovia_Price_Book__r.giic_State__c ==null){
                        salesOrd.gii__PriceBookName__c=ppmap.giic_Glovia_Price_Book__r.Name;
                    }   
                  //  System.debug('inside if block promo assignment : ' + 'Opportunity Branch :'+opp.Branch__c + 'Mapping branch :'+ppmap.giic_Branch__c);
                }            
            }
        }
        
        if(salesOrd.gii__PriceBookName__c==null)
        {   
            if(lstPricebookMappingwithoutBranch!=null && !lstPricebookMappingwithoutBranch.isEmpty())
            {
                for(giic_Product_Pricebook_Mapping__c ppmap: lstPricebookMappingwithoutBranch)
                {
                    if(ppmap.giic_Branch__c==null && ppmap.giic_Product_Type__r.gii__ProductReference__r.Id==oppLntm.Product2Id
                    ) 
                    {   
                        if(ppMap.giic_Glovia_Price_Book__r.giic_State__c !=null && opp.Branch__r.State_Province__c == ppMap.giic_Glovia_Price_Book__r.giic_State__c ){
                            salesOrd.gii__PriceBookName__c=ppmap.giic_Glovia_Price_Book__r.Name;
                        }else if(ppMap.giic_Glovia_Price_Book__r.giic_State__c ==null){
                            salesOrd.gii__PriceBookName__c=ppmap.giic_Glovia_Price_Book__r.Name;
                        }   
                      //  System.debug('inside if block promo assignment : ' + 'Opportunity Branch :'+opp.Branch__c + 'Mapping branch :'+ppmap.giic_Branch__c);
                    }               
                }
            }
            
            
        }
        //Abhik: 12/11/2017 : Associate Promotion with Sales order
        if(lstPromotionMappingwithBranch!=null && !lstPromotionMappingwithBranch.isEmpty())
        {
            for(giic_Product_Pricebook_Mapping__c ppmap: lstPromotionMappingwithBranch)
            {		        
                if( (salesOrd.giic_Install_Branch__c!=null && ppmap.giic_Branch__c!=null && salesOrd.giic_Install_Branch__c==ppmap.giic_Branch__c) && ppmap.giic_Product_Type__r.gii__ProductReference__r.Id==oppLntm.Product2Id 
                  && salesOrd.gii__OrderDate__c>= ppmap.giic_Promo_Effective_Start_Date__c && salesOrd.gii__OrderDate__c<=ppmap.giic_Promo_Effective_End_Date__c ) 
                {       
                    //System.debug('Inside install branch block : ' + 'Sales Order Install Branch :'+salesOrd.giic_Install_Branch__c + 'Mapping branch :'+ppmap.giic_Branch__c);
                    salesOrd.gii__Promotion__c=ppmap.giic_Promotion__c;
                    break ;
                }
            }
            
            if(salesOrd.gii__Promotion__c==null)
            {
                for(giic_Product_Pricebook_Mapping__c ppmap: lstPromotionMappingwithBranch)
                {
                    if( (ppmap.giic_Branch__c!=null && opp.Branch__c==ppmap.giic_Branch__c) && ppmap.giic_Product_Type__r.gii__ProductReference__r.Id==oppLntm.Product2Id 
                      && salesOrd.gii__OrderDate__c>= ppmap.giic_Promo_Effective_Start_Date__c && salesOrd.gii__OrderDate__c<=ppmap.giic_Promo_Effective_End_Date__c ) 
                    {       
                        //System.debug('Inside sales branch block  : ' + 'Opportunity Branch :'+opp.Branch__c + 'Mapping branch :'+ppmap.giic_Branch__c);
                        salesOrd.gii__Promotion__c=ppmap.giic_Promotion__c;
                        break;
                    }            
                }
            }
            
        }
        
        if(salesOrd.gii__Promotion__c==null)
        {   
            if(lstPromotionMappingwithoutBranch!=null && !lstPromotionMappingwithoutBranch.isEmpty())
            {
                
                for(giic_Product_Pricebook_Mapping__c ppmap: lstPromotionMappingwithoutBranch)
                {
                    if(ppmap.giic_Branch__c==null && ppmap.giic_Product_Type__r.gii__ProductReference__r.Id==oppLntm.Product2Id
                    && salesOrd.gii__OrderDate__c>=ppmap.giic_Promo_Effective_Start_Date__c && salesOrd.gii__OrderDate__c<=ppmap.giic_Promo_Effective_End_Date__c)
                    {  
                        //System.debug('Inside no branch block : ' + 'Product Type :'+ppmap.giic_Product_Type__r.gii__ProductReference__r.Id + 'Mapping branch :'+ppmap.giic_Branch__c);
                        salesOrd.gii__Promotion__c= ppmap.giic_Promotion__c;
                        break; 
                    }            
                }
            }
            
            
        }
        //---- Abhik : Promotion Association End -----
        //Murali:5/5/2017: Associate Sales Order with Pricebook and Promotion - Ends
        //**********end of block to associate promotion + pricebook to the  Sales Order based on product****************//
        
        return salesOrd;
    }
    
    /**
    *  Method to fetch Target Field value from Mapping master on the basis of Source 1 and Source 2 fields.
    *
    **/
    private Mapping_Master_Setting__mdt MapJobStatusAndSubStatus (String sourceField1,String sourceField2){
       for(Mapping_Master_Setting__mdt mapMster : mappingMasterList){
            if(mapMster.Source_Field1__c.equals(sourceField1) && mapMster.Source_Field2__c.equals(sourceField2)){
                return mapMster;
            }                                                           
        }
        return null;
    }
    
    /**
    *   Function to populate consultationSalesOrders Map
    *   @param List<gii__SalesOrder__c> listSalesOrders
    **/
    private void populateConsultationSalesOrderMap(List<gii__SalesOrder__c> listSalesOrders){
        for(gii__SalesOrder__c salesOrder : listSalesOrders){
            if(consultationSalesOrders.containsKey(salesOrder.gii__Opportunity__c)){
                consultationSalesOrders.get(salesOrder.gii__Opportunity__c).add(salesOrder);
            }else{
                consultationSalesOrders.put(salesOrder.gii__Opportunity__c, new List<gii__SalesOrder__c>{salesOrder});
            }
        }
    }
    
    /**
    *  Method to share Sales Order records with Public Groups.
    *   
    **/
    private List<gii__SalesOrder__Share> shareRecords(List<gii__SalesOrder__c> salesOrds){
        List<gii__SalesOrder__Share> salesOrderShareRecords = new List<gii__SalesOrder__Share>();
        for(gii__SalesOrder__c salesOrder : salesOrds){
            gii__SalesOrder__Share shareRecord = new gii__SalesOrder__Share();
            shareRecord.ParentId = salesOrder.id;
            shareRecord.UserOrGroupId = installBranchGroup.id;
            shareRecord.AccessLevel = 'Edit';
            salesOrderShareRecords.add(shareRecord);
        }
        return salesOrderShareRecords;       
    }
    
    /**
    *   Create ContentDocumentLink for each Consultation 
    *   ContentDocument and SaleOrder
    *   @return List<ContentDocumentLink> contentDocumentLinks
    **/
    private List<contentDocumentLink> getSalesOrderFileLinks(){
        List<ContentDocumentLink> salesOrderDocLinks = new List<ContentDocumentLink>();
        for(Id consultationId : consultationFiles.keySet()){
        //For each File
            for(Id contentDocumentId : consultationFiles.get(consultationId)){
                //For each Sales Order
                //Why containskey?, some of consultation may not be converted to SalesOrder
                //based on Pilot logic
                if(consultationSalesOrders.containsKey(consultationId)){
                    for(gii__SalesOrder__c salesOrd : consultationSalesOrders.get(consultationId)){
                        salesOrderDocLinks.add(getContentDocumentLink(contentDocumentId, salesOrd.Id));
                    }
                }
                if(mapWave1OppAndCustomerOrder !=null && mapWave1OppAndCustomerOrder.containsKey(consultationId)){
                    salesOrderDocLinks.add(getContentDocumentLink(contentDocumentId,mapWave1OppAndCustomerOrder.get(consultationId).Id));
                }if(mapWave2OppAndCustomerOrder!=null && mapWave2OppAndCustomerOrder.containsKey(consultationId)){
                    salesOrderDocLinks.add(getContentDocumentLink(contentDocumentId,mapWave2OppAndCustomerOrder.get(consultationId).Id));
                }
                
            }
        }
        return salesOrderDocLinks;
    }
    
    /**
    * Function get ContentNotes
    **/
    private List<ContentNote> getContentNotes(){
        List<ContentNote> contentNotes = new List<ContentNote>();
        for(String note: consultationNotes.keyset()){
            // CHECK FOR PILOT LOGIC
            if(consultationSalesOrders.containsKey(consultationNotes.get(note))){
                ContentNote cn = new ContentNote();
                cn.Title = 'Consultation Notes';
                cn.Content = Blob.valueOf(note);
                contentNotes.add(cn);
            }
        }
        return contentNotes;
    }
    
    /**
    *  Get ContentDocumentLinks for Consultation ContentNotes
    **/
    private List<ContentDocumentLink> getSalesOrderNoteLinks(List<ContentNote> contentNotes){
        List<ContentDocumentLink> contentNoteDocumentLinks = new List<ContentDocumentLink>();
        for(ContentNote contentNote : contentNotes){
            String consultationId = consultationNotes.get(contentNote.Content.toString());
            //Why containskey?, some of consultation may not be converted to SalesOrder
            //based on Pilot logic
            if(consultationSalesOrders.containsKey(consultationId)){
                for(gii__SalesOrder__c salesOrder : consultationSalesOrders.get(consultationId)){
                    contentNoteDocumentLinks.add(getContentDocumentLink(contentNote.Id, salesOrder.id));
                    if(salesOrder.Customer_Order__c !=null)
                    contentNoteDocumentLinks.add(getContentDocumentLink(contentNote.Id, salesOrder.Customer_Order__c)); 
                }
            }
        }
        return contentNoteDocumentLinks;
    }
    
    /**
    * Get ContentDocumentLink
    * @param contentDocumentId, either ContentDocumentId or ContentNoteId
    * @param linkedEntityId, SalesOrderId
    **/
    private ContentDocumentLink getContentDocumentLink(Id contentDocumentId, Id linkedEntityId){
        ContentDocumentLink cdlink = new ContentDocumentLink();
        cdlink.ContentDocumentId = contentDocumentId;
        cdlink.LinkedEntityId = linkedEntityId;
        cdlink.ShareType = 'V';
        cdlink.Visibility = 'InternalUsers';
        return cdlink;
    }
}
